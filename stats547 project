{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4883a1f2-4b0a-4707-9e50-83f0e09a173e",
   "metadata": {
    "id": "4883a1f2-4b0a-4707-9e50-83f0e09a173e"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ab092a1",
   "metadata": {},
   "source": [
    "0. Import the Patient Survival Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c2917f17-f35a-4acd-96c9-96223070b92b",
   "metadata": {
    "id": "c2917f17-f35a-4acd-96c9-96223070b92b",
    "outputId": "b3e84d6e-25b5-42de-d34e-8ae402992259"
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5d56e9e9-1cc0-43a2-8a9e-4640fafe06c5",
   "metadata": {
    "id": "5d56e9e9-1cc0-43a2-8a9e-4640fafe06c5",
    "outputId": "e841dc07-2df2-44d0-863c-9512af5445a5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "91713"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#data.info()\n",
    "len(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "14c6ca48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "encounter_id                   91713\n",
       "patient_id                     91713\n",
       "hospital_id                      147\n",
       "age                               74\n",
       "bmi                            34888\n",
       "                               ...  \n",
       "lymphoma                           2\n",
       "solid_tumor_with_metastasis        2\n",
       "apache_3j_bodysystem              11\n",
       "apache_2_bodysystem               10\n",
       "hospital_death                     2\n",
       "Length: 84, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62a64ebb",
   "metadata": {},
   "source": [
    "1. Handling Null Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cc992778",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56935"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#data.isna().sum()\n",
    "data = data.dropna()\n",
    "len(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "59e44295",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>encounter_id</th>\n",
       "      <th>patient_id</th>\n",
       "      <th>hospital_id</th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>elective_surgery</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>icu_admit_source</th>\n",
       "      <th>...</th>\n",
       "      <th>cirrhosis</th>\n",
       "      <th>diabetes_mellitus</th>\n",
       "      <th>hepatic_failure</th>\n",
       "      <th>immunosuppression</th>\n",
       "      <th>leukemia</th>\n",
       "      <th>lymphoma</th>\n",
       "      <th>solid_tumor_with_metastasis</th>\n",
       "      <th>apache_3j_bodysystem</th>\n",
       "      <th>apache_2_bodysystem</th>\n",
       "      <th>hospital_death</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 84 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [encounter_id, patient_id, hospital_id, age, bmi, elective_surgery, ethnicity, gender, height, icu_admit_source, icu_id, icu_stay_type, icu_type, pre_icu_los_days, weight, apache_2_diagnosis, apache_3j_diagnosis, apache_post_operative, arf_apache, gcs_eyes_apache, gcs_motor_apache, gcs_unable_apache, gcs_verbal_apache, heart_rate_apache, intubated_apache, map_apache, resprate_apache, temp_apache, ventilated_apache, d1_diasbp_max, d1_diasbp_min, d1_diasbp_noninvasive_max, d1_diasbp_noninvasive_min, d1_heartrate_max, d1_heartrate_min, d1_mbp_max, d1_mbp_min, d1_mbp_noninvasive_max, d1_mbp_noninvasive_min, d1_resprate_max, d1_resprate_min, d1_spo2_max, d1_spo2_min, d1_sysbp_max, d1_sysbp_min, d1_sysbp_noninvasive_max, d1_sysbp_noninvasive_min, d1_temp_max, d1_temp_min, h1_diasbp_max, h1_diasbp_min, h1_diasbp_noninvasive_max, h1_diasbp_noninvasive_min, h1_heartrate_max, h1_heartrate_min, h1_mbp_max, h1_mbp_min, h1_mbp_noninvasive_max, h1_mbp_noninvasive_min, h1_resprate_max, h1_resprate_min, h1_spo2_max, h1_spo2_min, h1_sysbp_max, h1_sysbp_min, h1_sysbp_noninvasive_max, h1_sysbp_noninvasive_min, d1_glucose_max, d1_glucose_min, d1_potassium_max, d1_potassium_min, apache_4a_hospital_death_prob, apache_4a_icu_death_prob, aids, cirrhosis, diabetes_mellitus, hepatic_failure, immunosuppression, leukemia, lymphoma, solid_tumor_with_metastasis, apache_3j_bodysystem, apache_2_bodysystem, hospital_death]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 84 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data.duplicated()]  # test duplicate rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9609149",
   "metadata": {},
   "source": [
    "2. Select needed variables and sample of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a698ed6d-3ee9-485e-b93d-795daa43dd4c",
   "metadata": {
    "id": "a698ed6d-3ee9-485e-b93d-795daa43dd4c"
   },
   "outputs": [],
   "source": [
    "df = data[['age', 'bmi', 'gender','height','ethnicity', 'h1_heartrate_max', 'h1_heartrate_min', \n",
    "           'd1_temp_max', 'd1_temp_min', 'd1_mbp_max','d1_mbp_min',\n",
    "           'd1_diasbp_max', 'd1_diasbp_min', 'hospital_death']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2557595a-9856-4185-bcad-033759984762",
   "metadata": {
    "id": "2557595a-9856-4185-bcad-033759984762"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5694"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sample = df.sample(frac=0.1, random_state=1)\n",
    "len(df_sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "795a953e",
   "metadata": {},
   "source": [
    "3. Handling categorical variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c9d26873",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                 float64\n",
       "bmi                 float64\n",
       "gender               object\n",
       "height              float64\n",
       "ethnicity            object\n",
       "h1_heartrate_max    float64\n",
       "h1_heartrate_min    float64\n",
       "d1_temp_max         float64\n",
       "d1_temp_min         float64\n",
       "d1_mbp_max          float64\n",
       "d1_mbp_min          float64\n",
       "d1_diasbp_max       float64\n",
       "d1_diasbp_min       float64\n",
       "hospital_death        int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sample.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6135c222",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age                  float64\n",
       "bmi                  float64\n",
       "gender              category\n",
       "height               float64\n",
       "ethnicity           category\n",
       "h1_heartrate_max     float64\n",
       "h1_heartrate_min     float64\n",
       "d1_temp_max          float64\n",
       "d1_temp_min          float64\n",
       "d1_mbp_max           float64\n",
       "d1_mbp_min           float64\n",
       "d1_diasbp_max        float64\n",
       "d1_diasbp_min        float64\n",
       "hospital_death      category\n",
       "dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sample['hospital_death'] = df_sample['hospital_death'].astype('category')\n",
    "#data['hospital_death'] = pd.Categorical(data.hospital_death)\n",
    "df_sample['ethnicity'] = df_sample['ethnicity'].astype('category')\n",
    "df_sample['gender'] = df_sample['gender'].astype('category')\n",
    "df_sample.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d777dbd-9f1c-4bdd-87ad-66308f2cd000",
   "metadata": {},
   "source": [
    "4. Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "36e804fd-0b35-4019-894f-c249dc300a8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = ['h1_heartrate_max', 'h1_heartrate_min',\n",
    "      'd1_temp_max', 'd1_temp_min',\n",
    "      'd1_mbp_max', 'd1_mbp_min',\n",
    "      'd1_diasbp_max', 'd1_diasbp_min']\n",
    "df_std = df_sample\n",
    "for val in lst:\n",
    "    df_std[val] = (df_sample[val] - df_sample[val].mean(axis = 0))/df_sample[val].std(axis = 0)\n",
    "#df_std"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae5a73d4",
   "metadata": {},
   "source": [
    "5. Visualization of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "878a76c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_std.groupby('ethnicity').count()\n",
    "#df_std.hospital_death.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "225ea519",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sns.pairplot(df_std)\n",
    "df_survive = df_std.loc[df_std['hospital_death'] == 0] \n",
    "df_death = df_std.loc[df_std['hospital_death'] != 0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9b4175ae-58c7-40b2-896e-69fecaeb69d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x1800 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(4, 2, figsize=(25,25), sharey='row')\n",
    "ax[0, 0].bar(range(len(df_survive['h1_heartrate_max'])), df_survive['h1_heartrate_max'])\n",
    "ax[0, 0].bar(range(len(df_death['h1_heartrate_max'])), df_death['h1_heartrate_max'])\n",
    "ax[0, 0].set_title(\"max heart rate\")\n",
    "ax[0, 1].bar(range(len(df_survive['h1_heartrate_min'])), df_survive['h1_heartrate_min'])\n",
    "ax[0, 1].bar(range(len(df_death['h1_heartrate_min'])), df_death['h1_heartrate_min'])\n",
    "ax[0, 1].set_title(\"min heart rate\")\n",
    "ax[1, 0].bar(range(len(df_survive['d1_temp_max'])), df_survive['d1_temp_max'])\n",
    "ax[1, 0].bar(range(len(df_death['d1_temp_max'])), df_death['d1_temp_max'])\n",
    "ax[1, 0].set_title(\"max temperature\")\n",
    "ax[1, 1].bar(range(len(df_survive['d1_temp_min'])), df_survive['d1_temp_min'])\n",
    "ax[1, 1].bar(range(len(df_death['d1_temp_min'])), df_death['d1_temp_min'])\n",
    "ax[1, 1].set_title(\"min temperature\")\n",
    "ax[2, 0].bar(range(len(df_survive['d1_mbp_max'])), df_survive['d1_mbp_max'])\n",
    "ax[2, 0].bar(range(len(df_death['d1_mbp_max'])), df_death['d1_mbp_max'])\n",
    "ax[2, 0].set_title(\"max mbp\")\n",
    "ax[2, 1].bar(range(len(df_survive['d1_mbp_min'])), df_survive['d1_mbp_min'])\n",
    "ax[2, 1].bar(range(len(df_death['d1_mbp_min'])), df_death['d1_mbp_min'])\n",
    "ax[2, 1].set_title(\"min mbp\")\n",
    "ax[3, 0].bar(range(len(df_survive['d1_diasbp_max'])), df_survive['d1_diasbp_max'])\n",
    "ax[3, 0].bar(range(len(df_death['d1_diasbp_max'])), df_death['d1_diasbp_max'])\n",
    "ax[3, 0].set_title(\"max diasbp\")\n",
    "ax[3, 1].bar(range(len(df_survive['d1_diasbp_min'])), df_survive['d1_diasbp_min'])\n",
    "ax[3, 1].bar(range(len(df_death['d1_diasbp_min'])), df_death['d1_diasbp_min'])\n",
    "ax[3, 1].set_title(\"min diasbp\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2f063232-fc7e-4c3f-b2a4-241aca532383",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/junqianliu/opt/anaconda3/envs/SI618/lib/python3.9/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f,ax=plt.subplots(1,2,figsize=(18,8))\n",
    "sns.countplot('gender',hue='hospital_death',data=df_std, ax=ax[0])\n",
    "sns.countplot('ethnicity',hue='hospital_death',data=df_std, ax=ax[1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b518e149-9bdf-4f1e-a463-39bd67bba6a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x17491ffa0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(df_std, col=\"hospital_death\")\n",
    "g.map(sns.histplot, \"age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cfde5f3c-7b22-45b3-a69a-6749ee3eb62a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x18ca31af0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(df_std, col=\"hospital_death\")\n",
    "g.map(sns.histplot, \"bmi\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9091b2ce",
   "metadata": {},
   "source": [
    "6. Split into training and test dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "02dc99db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of training/testing examples: (4555, 1139)\n"
     ]
    }
   ],
   "source": [
    "train_data, test_data = train_test_split(df_std, test_size=0.2, random_state=25)\n",
    "\n",
    "print(f\"No. of training/testing examples: {train_data.shape[0], test_data.shape[0]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9b4c10e",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 7. Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f9ae218",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "520728c9-06b8-472b-945b-db17e28ed15b",
   "metadata": {},
   "source": [
    "#### 7.1 Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c3b60c8-7b43-4312-95bf-9348eac6f787",
   "metadata": {},
   "source": [
    "##### implementing the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "86400a9e-9d1c-4ad3-a458-1e631afdb610",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>h1_heartrate_max</th>\n",
       "      <th>h1_heartrate_min</th>\n",
       "      <th>d1_temp_max</th>\n",
       "      <th>d1_temp_min</th>\n",
       "      <th>d1_mbp_max</th>\n",
       "      <th>d1_mbp_min</th>\n",
       "      <th>d1_diasbp_max</th>\n",
       "      <th>d1_diasbp_min</th>\n",
       "      <th>hospital_death</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30404</th>\n",
       "      <td>59.0</td>\n",
       "      <td>18.984375</td>\n",
       "      <td>F</td>\n",
       "      <td>160.0</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>1.282476</td>\n",
       "      <td>0.158582</td>\n",
       "      <td>0.269911</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.479123</td>\n",
       "      <td>-1.574469</td>\n",
       "      <td>0.696901</td>\n",
       "      <td>-1.266003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83591</th>\n",
       "      <td>85.0</td>\n",
       "      <td>25.582316</td>\n",
       "      <td>M</td>\n",
       "      <td>172.7</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-0.701212</td>\n",
       "      <td>-1.174684</td>\n",
       "      <td>-2.432593</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-0.012830</td>\n",
       "      <td>-1.704829</td>\n",
       "      <td>0.020682</td>\n",
       "      <td>-2.029709</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27388</th>\n",
       "      <td>63.0</td>\n",
       "      <td>28.867188</td>\n",
       "      <td>F</td>\n",
       "      <td>160.0</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-0.286022</td>\n",
       "      <td>-0.433981</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.479123</td>\n",
       "      <td>0.837184</td>\n",
       "      <td>1.009001</td>\n",
       "      <td>0.566891</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17328</th>\n",
       "      <td>86.0</td>\n",
       "      <td>29.186193</td>\n",
       "      <td>M</td>\n",
       "      <td>157.5</td>\n",
       "      <td>Hispanic</td>\n",
       "      <td>0.175301</td>\n",
       "      <td>0.603004</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.406392</td>\n",
       "      <td>-0.857491</td>\n",
       "      <td>0.072699</td>\n",
       "      <td>-0.807779</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1830</th>\n",
       "      <td>43.0</td>\n",
       "      <td>32.289347</td>\n",
       "      <td>M</td>\n",
       "      <td>167.6</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>1.282476</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>0.838859</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>0.725099</td>\n",
       "      <td>1.032724</td>\n",
       "      <td>0.488833</td>\n",
       "      <td>0.719633</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47237</th>\n",
       "      <td>57.0</td>\n",
       "      <td>15.967369</td>\n",
       "      <td>F</td>\n",
       "      <td>170.1</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-0.101493</td>\n",
       "      <td>0.306723</td>\n",
       "      <td>-0.441274</td>\n",
       "      <td>0.586485</td>\n",
       "      <td>-0.750760</td>\n",
       "      <td>-0.270873</td>\n",
       "      <td>-0.707552</td>\n",
       "      <td>-0.120444</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20183</th>\n",
       "      <td>73.0</td>\n",
       "      <td>18.143962</td>\n",
       "      <td>F</td>\n",
       "      <td>164.0</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-1.347065</td>\n",
       "      <td>-1.224064</td>\n",
       "      <td>0.269911</td>\n",
       "      <td>-0.248179</td>\n",
       "      <td>-1.734665</td>\n",
       "      <td>-0.336053</td>\n",
       "      <td>-1.851921</td>\n",
       "      <td>-0.502297</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14825</th>\n",
       "      <td>53.0</td>\n",
       "      <td>24.609375</td>\n",
       "      <td>M</td>\n",
       "      <td>160.0</td>\n",
       "      <td>Hispanic</td>\n",
       "      <td>0.452095</td>\n",
       "      <td>0.701765</td>\n",
       "      <td>-0.014563</td>\n",
       "      <td>-0.526400</td>\n",
       "      <td>-0.308002</td>\n",
       "      <td>0.641645</td>\n",
       "      <td>-0.187385</td>\n",
       "      <td>1.101486</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87412</th>\n",
       "      <td>63.0</td>\n",
       "      <td>66.107338</td>\n",
       "      <td>F</td>\n",
       "      <td>170.2</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-0.839609</td>\n",
       "      <td>-1.421585</td>\n",
       "      <td>-0.867985</td>\n",
       "      <td>-0.665511</td>\n",
       "      <td>1.463029</td>\n",
       "      <td>-0.270873</td>\n",
       "      <td>0.956984</td>\n",
       "      <td>-1.266003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46819</th>\n",
       "      <td>58.0</td>\n",
       "      <td>27.382183</td>\n",
       "      <td>M</td>\n",
       "      <td>182.9</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>0.129169</td>\n",
       "      <td>-0.187079</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>-0.248179</td>\n",
       "      <td>-0.849150</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>-0.759569</td>\n",
       "      <td>-0.273185</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5694 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age        bmi gender  height  ethnicity  h1_heartrate_max  \\\n",
       "30404  59.0  18.984375      F   160.0  Caucasian          1.282476   \n",
       "83591  85.0  25.582316      M   172.7  Caucasian         -0.701212   \n",
       "27388  63.0  28.867188      F   160.0  Caucasian         -0.286022   \n",
       "17328  86.0  29.186193      M   157.5   Hispanic          0.175301   \n",
       "1830   43.0  32.289347      M   167.6  Caucasian          1.282476   \n",
       "...     ...        ...    ...     ...        ...               ...   \n",
       "47237  57.0  15.967369      F   170.1  Caucasian         -0.101493   \n",
       "20183  73.0  18.143962      F   164.0  Caucasian         -1.347065   \n",
       "14825  53.0  24.609375      M   160.0   Hispanic          0.452095   \n",
       "87412  63.0  66.107338      F   170.2  Caucasian         -0.839609   \n",
       "46819  58.0  27.382183      M   182.9  Caucasian          0.129169   \n",
       "\n",
       "       h1_heartrate_min  d1_temp_max  d1_temp_min  d1_mbp_max  d1_mbp_min  \\\n",
       "30404          0.158582     0.269911     0.030043    0.479123   -1.574469   \n",
       "83591         -1.174684    -2.432593    -1.082843   -0.012830   -1.704829   \n",
       "27388         -0.433981     0.696622     0.030043    0.479123    0.837184   \n",
       "17328          0.603004    -0.725748     0.169153   -0.406392   -0.857491   \n",
       "1830           1.244947     0.838859     0.169153    0.725099    1.032724   \n",
       "...                 ...          ...          ...         ...         ...   \n",
       "47237          0.306723    -0.441274     0.586485   -0.750760   -0.270873   \n",
       "20183         -1.224064     0.269911    -0.248179   -1.734665   -0.336053   \n",
       "14825          0.701765    -0.014563    -0.526400   -0.308002    0.641645   \n",
       "87412         -1.421585    -0.867985    -0.665511    1.463029   -0.270873   \n",
       "46819         -0.187079    -0.725748    -0.248179   -0.849150   -0.596772   \n",
       "\n",
       "       d1_diasbp_max  d1_diasbp_min hospital_death  \n",
       "30404       0.696901      -1.266003              0  \n",
       "83591       0.020682      -2.029709              1  \n",
       "27388       1.009001       0.566891              0  \n",
       "17328       0.072699      -0.807779              0  \n",
       "1830        0.488833       0.719633              0  \n",
       "...              ...            ...            ...  \n",
       "47237      -0.707552      -0.120444              0  \n",
       "20183      -1.851921      -0.502297              0  \n",
       "14825      -0.187385       1.101486              0  \n",
       "87412       0.956984      -1.266003              0  \n",
       "46819      -0.759569      -0.273185              0  \n",
       "\n",
       "[5694 rows x 14 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dc31aaaa-79ea-4731-962b-c53c2178fb85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create dummy variables for gender\n",
    "gender_data = pd.get_dummies(df_std['gender'], drop_first = True)\n",
    "ethnicity_data = pd.get_dummies(df_std['ethnicity'], drop_first = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "72426467-b0bf-4938-8938-045a16fa399f",
   "metadata": {},
   "outputs": [],
   "source": [
    "log_df = pd.concat([df_std, gender_data, ethnicity_data], axis = 1)\n",
    "log_df.drop(['gender', 'ethnicity'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2f995ffb-8cdb-477d-baaa-f43ee6141c84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>height</th>\n",
       "      <th>h1_heartrate_max</th>\n",
       "      <th>h1_heartrate_min</th>\n",
       "      <th>d1_temp_max</th>\n",
       "      <th>d1_temp_min</th>\n",
       "      <th>d1_mbp_max</th>\n",
       "      <th>d1_mbp_min</th>\n",
       "      <th>d1_diasbp_max</th>\n",
       "      <th>d1_diasbp_min</th>\n",
       "      <th>hospital_death</th>\n",
       "      <th>gender</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Caucasian</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Other/Unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30404</th>\n",
       "      <td>59.0</td>\n",
       "      <td>18.984375</td>\n",
       "      <td>160.0</td>\n",
       "      <td>1.282476</td>\n",
       "      <td>0.158582</td>\n",
       "      <td>0.269911</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.479123</td>\n",
       "      <td>-1.574469</td>\n",
       "      <td>0.696901</td>\n",
       "      <td>-1.266003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83591</th>\n",
       "      <td>85.0</td>\n",
       "      <td>25.582316</td>\n",
       "      <td>172.7</td>\n",
       "      <td>-0.701212</td>\n",
       "      <td>-1.174684</td>\n",
       "      <td>-2.432593</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-0.012830</td>\n",
       "      <td>-1.704829</td>\n",
       "      <td>0.020682</td>\n",
       "      <td>-2.029709</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27388</th>\n",
       "      <td>63.0</td>\n",
       "      <td>28.867188</td>\n",
       "      <td>160.0</td>\n",
       "      <td>-0.286022</td>\n",
       "      <td>-0.433981</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.479123</td>\n",
       "      <td>0.837184</td>\n",
       "      <td>1.009001</td>\n",
       "      <td>0.566891</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17328</th>\n",
       "      <td>86.0</td>\n",
       "      <td>29.186193</td>\n",
       "      <td>157.5</td>\n",
       "      <td>0.175301</td>\n",
       "      <td>0.603004</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.406392</td>\n",
       "      <td>-0.857491</td>\n",
       "      <td>0.072699</td>\n",
       "      <td>-0.807779</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1830</th>\n",
       "      <td>43.0</td>\n",
       "      <td>32.289347</td>\n",
       "      <td>167.6</td>\n",
       "      <td>1.282476</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>0.838859</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>0.725099</td>\n",
       "      <td>1.032724</td>\n",
       "      <td>0.488833</td>\n",
       "      <td>0.719633</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47237</th>\n",
       "      <td>57.0</td>\n",
       "      <td>15.967369</td>\n",
       "      <td>170.1</td>\n",
       "      <td>-0.101493</td>\n",
       "      <td>0.306723</td>\n",
       "      <td>-0.441274</td>\n",
       "      <td>0.586485</td>\n",
       "      <td>-0.750760</td>\n",
       "      <td>-0.270873</td>\n",
       "      <td>-0.707552</td>\n",
       "      <td>-0.120444</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20183</th>\n",
       "      <td>73.0</td>\n",
       "      <td>18.143962</td>\n",
       "      <td>164.0</td>\n",
       "      <td>-1.347065</td>\n",
       "      <td>-1.224064</td>\n",
       "      <td>0.269911</td>\n",
       "      <td>-0.248179</td>\n",
       "      <td>-1.734665</td>\n",
       "      <td>-0.336053</td>\n",
       "      <td>-1.851921</td>\n",
       "      <td>-0.502297</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14825</th>\n",
       "      <td>53.0</td>\n",
       "      <td>24.609375</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0.452095</td>\n",
       "      <td>0.701765</td>\n",
       "      <td>-0.014563</td>\n",
       "      <td>-0.526400</td>\n",
       "      <td>-0.308002</td>\n",
       "      <td>0.641645</td>\n",
       "      <td>-0.187385</td>\n",
       "      <td>1.101486</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87412</th>\n",
       "      <td>63.0</td>\n",
       "      <td>66.107338</td>\n",
       "      <td>170.2</td>\n",
       "      <td>-0.839609</td>\n",
       "      <td>-1.421585</td>\n",
       "      <td>-0.867985</td>\n",
       "      <td>-0.665511</td>\n",
       "      <td>1.463029</td>\n",
       "      <td>-0.270873</td>\n",
       "      <td>0.956984</td>\n",
       "      <td>-1.266003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46819</th>\n",
       "      <td>58.0</td>\n",
       "      <td>27.382183</td>\n",
       "      <td>182.9</td>\n",
       "      <td>0.129169</td>\n",
       "      <td>-0.187079</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>-0.248179</td>\n",
       "      <td>-0.849150</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>-0.759569</td>\n",
       "      <td>-0.273185</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5694 rows Ã— 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age        bmi  height  h1_heartrate_max  h1_heartrate_min  \\\n",
       "30404  59.0  18.984375   160.0          1.282476          0.158582   \n",
       "83591  85.0  25.582316   172.7         -0.701212         -1.174684   \n",
       "27388  63.0  28.867188   160.0         -0.286022         -0.433981   \n",
       "17328  86.0  29.186193   157.5          0.175301          0.603004   \n",
       "1830   43.0  32.289347   167.6          1.282476          1.244947   \n",
       "...     ...        ...     ...               ...               ...   \n",
       "47237  57.0  15.967369   170.1         -0.101493          0.306723   \n",
       "20183  73.0  18.143962   164.0         -1.347065         -1.224064   \n",
       "14825  53.0  24.609375   160.0          0.452095          0.701765   \n",
       "87412  63.0  66.107338   170.2         -0.839609         -1.421585   \n",
       "46819  58.0  27.382183   182.9          0.129169         -0.187079   \n",
       "\n",
       "       d1_temp_max  d1_temp_min  d1_mbp_max  d1_mbp_min  d1_diasbp_max  \\\n",
       "30404     0.269911     0.030043    0.479123   -1.574469       0.696901   \n",
       "83591    -2.432593    -1.082843   -0.012830   -1.704829       0.020682   \n",
       "27388     0.696622     0.030043    0.479123    0.837184       1.009001   \n",
       "17328    -0.725748     0.169153   -0.406392   -0.857491       0.072699   \n",
       "1830      0.838859     0.169153    0.725099    1.032724       0.488833   \n",
       "...            ...          ...         ...         ...            ...   \n",
       "47237    -0.441274     0.586485   -0.750760   -0.270873      -0.707552   \n",
       "20183     0.269911    -0.248179   -1.734665   -0.336053      -1.851921   \n",
       "14825    -0.014563    -0.526400   -0.308002    0.641645      -0.187385   \n",
       "87412    -0.867985    -0.665511    1.463029   -0.270873       0.956984   \n",
       "46819    -0.725748    -0.248179   -0.849150   -0.596772      -0.759569   \n",
       "\n",
       "       d1_diasbp_min hospital_death  gender  Asian  Caucasian  Hispanic  \\\n",
       "30404      -1.266003              0       0      0          1         0   \n",
       "83591      -2.029709              1       1      0          1         0   \n",
       "27388       0.566891              0       0      0          1         0   \n",
       "17328      -0.807779              0       1      0          0         1   \n",
       "1830        0.719633              0       1      0          1         0   \n",
       "...              ...            ...     ...    ...        ...       ...   \n",
       "47237      -0.120444              0       0      0          1         0   \n",
       "20183      -0.502297              0       0      0          1         0   \n",
       "14825       1.101486              0       1      0          0         1   \n",
       "87412      -1.266003              0       0      0          1         0   \n",
       "46819      -0.273185              0       1      0          1         0   \n",
       "\n",
       "       Native American  Other/Unknown  \n",
       "30404                0              0  \n",
       "83591                0              0  \n",
       "27388                0              0  \n",
       "17328                0              0  \n",
       "1830                 0              0  \n",
       "...                ...            ...  \n",
       "47237                0              0  \n",
       "20183                0              0  \n",
       "14825                0              0  \n",
       "87412                0              0  \n",
       "46819                0              0  \n",
       "\n",
       "[5694 rows x 18 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_df = log_df.rename(columns={\"M\": \"gender\"})\n",
    "log_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8dbe2fd9-5db9-4692-947c-3981f066e587",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = log_df['hospital_death']\n",
    "X = log_df.drop(columns = 'hospital_death', inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1e6cd969-1a1b-458b-bd7b-adc947e1ddac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.243085\n",
      "         Iterations 7\n",
      "                         Results: Logit\n",
      "=================================================================\n",
      "Model:              Logit            Pseudo R-squared: 0.138     \n",
      "Dependent Variable: hospital_death   AIC:              2802.2515 \n",
      "Date:               2022-04-16 01:36 BIC:              2915.2533 \n",
      "No. Observations:   5694             Log-Likelihood:   -1384.1   \n",
      "Df Model:           16               LL-Null:          -1605.5   \n",
      "Df Residuals:       5677             LLR p-value:      3.7963e-84\n",
      "Converged:          1.0000           Scale:            1.0000    \n",
      "No. Iterations:     7.0000                                       \n",
      "-----------------------------------------------------------------\n",
      "                  Coef.  Std.Err.    z     P>|z|   [0.025  0.975]\n",
      "-----------------------------------------------------------------\n",
      "age               0.0193   0.0034   5.6862 0.0000  0.0126  0.0259\n",
      "bmi              -0.0214   0.0064  -3.3232 0.0009 -0.0340 -0.0088\n",
      "height           -0.0201   0.0020  -9.9752 0.0000 -0.0240 -0.0161\n",
      "h1_heartrate_max -0.0446   0.1015  -0.4391 0.6606 -0.2436  0.1544\n",
      "h1_heartrate_min  0.4235   0.1011   4.1871 0.0000  0.2253  0.6217\n",
      "d1_temp_max       0.1070   0.0477   2.2448 0.0248  0.0136  0.2004\n",
      "d1_temp_min      -0.5181   0.0377 -13.7497 0.0000 -0.5920 -0.4442\n",
      "d1_mbp_max        0.0677   0.0955   0.7081 0.4789 -0.1196  0.2549\n",
      "d1_mbp_min       -0.4223   0.1095  -3.8552 0.0001 -0.6370 -0.2076\n",
      "d1_diasbp_max    -0.0729   0.0946  -0.7707 0.4409 -0.2583  0.1125\n",
      "d1_diasbp_min    -0.1792   0.1071  -1.6726 0.0944 -0.3892  0.0308\n",
      "gender            0.4350   0.1138   3.8230 0.0001  0.2120  0.6581\n",
      "Asian            -0.9985   0.6296  -1.5860 0.1127 -2.2325  0.2354\n",
      "Caucasian        -0.1974   0.1746  -1.1305 0.2583 -0.5397  0.1448\n",
      "Hispanic         -0.7685   0.3411  -2.2527 0.0243 -1.4371 -0.0999\n",
      "Native American   0.1539   0.4652   0.3309 0.7407 -0.7578  1.0657\n",
      "Other/Unknown    -0.7743   0.3275  -2.3644 0.0181 -1.4163 -0.1324\n",
      "=================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "logit_model=sm.Logit(y,X)\n",
    "result=logit_model.fit()\n",
    "print(result.summary2())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "772506b0-ba5b-452b-b1c5-d6c366298793",
   "metadata": {},
   "source": [
    "The p-values for most of the variables are smaller than 0.05, except seven variables, therefore, we will remove them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "594b647a-6a1e-4b42-a849-e2eeb144c5d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.243785\n",
      "         Iterations 7\n",
      "                         Results: Logit\n",
      "=================================================================\n",
      "Model:              Logit            Pseudo R-squared: 0.135     \n",
      "Dependent Variable: hospital_death   AIC:              2796.2240 \n",
      "Date:               2022-04-16 01:36 BIC:              2862.6957 \n",
      "No. Observations:   5694             Log-Likelihood:   -1388.1   \n",
      "Df Model:           9                LL-Null:          -1605.5   \n",
      "Df Residuals:       5684             LLR p-value:      5.0679e-88\n",
      "Converged:          1.0000           Scale:            1.0000    \n",
      "No. Iterations:     7.0000                                       \n",
      "-----------------------------------------------------------------\n",
      "                  Coef.  Std.Err.    z     P>|z|   [0.025  0.975]\n",
      "-----------------------------------------------------------------\n",
      "age               0.0196   0.0033   5.9795 0.0000  0.0132  0.0260\n",
      "bmi              -0.0198   0.0064  -3.1171 0.0018 -0.0323 -0.0074\n",
      "height           -0.0215   0.0018 -11.6226 0.0000 -0.0251 -0.0179\n",
      "h1_heartrate_min  0.3756   0.0501   7.4990 0.0000  0.2774  0.4737\n",
      "d1_temp_max       0.1051   0.0473   2.2209 0.0264  0.0123  0.1978\n",
      "d1_temp_min      -0.5194   0.0373 -13.9085 0.0000 -0.5926 -0.4462\n",
      "d1_mbp_min       -0.5603   0.0567  -9.8897 0.0000 -0.6714 -0.4493\n",
      "gender            0.4363   0.1129   3.8627 0.0001  0.2149  0.6577\n",
      "Hispanic         -0.5898   0.3032  -1.9450 0.0518 -1.1842  0.0045\n",
      "Other/Unknown    -0.6059   0.2915  -2.0784 0.0377 -1.1773 -0.0345\n",
      "=================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cols=['age', 'bmi', 'height', 'h1_heartrate_min', 'd1_temp_max', \n",
    "      'd1_temp_min', 'd1_mbp_min', 'gender', 'Hispanic', 'Other/Unknown'] \n",
    "X=log_df[cols]\n",
    "y=log_df['hospital_death']\n",
    "logit_model=sm.Logit(y,X)\n",
    "result=logit_model.fit()\n",
    "print(result.summary2())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc2cc14d-fd1d-4b27-b6d9-b6b58b074a8b",
   "metadata": {},
   "source": [
    "The p-values for most of the variables are smaller than 0.05, except Hispanic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dc1369e2-8aad-46ec-8813-d4e393294358",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.244169\n",
      "         Iterations 7\n",
      "                         Results: Logit\n",
      "=================================================================\n",
      "Model:              Logit            Pseudo R-squared: 0.134     \n",
      "Dependent Variable: hospital_death   AIC:              2798.5944 \n",
      "Date:               2022-04-16 01:36 BIC:              2858.4189 \n",
      "No. Observations:   5694             Log-Likelihood:   -1390.3   \n",
      "Df Model:           8                LL-Null:          -1605.5   \n",
      "Df Residuals:       5685             LLR p-value:      5.7358e-88\n",
      "Converged:          1.0000           Scale:            1.0000    \n",
      "No. Iterations:     7.0000                                       \n",
      "-----------------------------------------------------------------\n",
      "                  Coef.  Std.Err.    z     P>|z|   [0.025  0.975]\n",
      "-----------------------------------------------------------------\n",
      "age               0.0194   0.0033   5.9336 0.0000  0.0130  0.0258\n",
      "bmi              -0.0197   0.0064  -3.0940 0.0020 -0.0322 -0.0072\n",
      "height           -0.0215   0.0018 -11.6723 0.0000 -0.0252 -0.0179\n",
      "h1_heartrate_min  0.3715   0.0500   7.4356 0.0000  0.2736  0.4695\n",
      "d1_temp_max       0.1067   0.0473   2.2544 0.0242  0.0139  0.1994\n",
      "d1_temp_min      -0.5214   0.0373 -13.9680 0.0000 -0.5946 -0.4483\n",
      "d1_mbp_min       -0.5583   0.0567  -9.8500 0.0000 -0.6694 -0.4472\n",
      "gender            0.4372   0.1128   3.8745 0.0001  0.2160  0.6583\n",
      "Other/Unknown    -0.5852   0.2914  -2.0081 0.0446 -1.1564 -0.0140\n",
      "=================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cols=['age', 'bmi', 'height', 'h1_heartrate_min', 'd1_temp_max', \n",
    "      'd1_temp_min', 'd1_mbp_min', 'gender', 'Other/Unknown'] \n",
    "X=log_df[cols]\n",
    "y=log_df['hospital_death']\n",
    "logit_model=sm.Logit(y,X)\n",
    "result=logit_model.fit()\n",
    "print(result.summary2())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a51c4cbf-36a8-4a02-a854-c7fbf5be4af5",
   "metadata": {},
   "source": [
    "##### Logistic Regression Model Fitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a6ed465d-9ee2-48b7-a1b1-0e18051545e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>h1_heartrate_max</th>\n",
       "      <th>h1_heartrate_min</th>\n",
       "      <th>d1_temp_max</th>\n",
       "      <th>d1_temp_min</th>\n",
       "      <th>d1_mbp_max</th>\n",
       "      <th>d1_mbp_min</th>\n",
       "      <th>d1_diasbp_max</th>\n",
       "      <th>d1_diasbp_min</th>\n",
       "      <th>hospital_death</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18296</th>\n",
       "      <td>68.0</td>\n",
       "      <td>23.956261</td>\n",
       "      <td>F</td>\n",
       "      <td>165.10</td>\n",
       "      <td>Hispanic</td>\n",
       "      <td>-1.762255</td>\n",
       "      <td>-1.470965</td>\n",
       "      <td>0.412148</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>-0.357197</td>\n",
       "      <td>0.380925</td>\n",
       "      <td>-0.083351</td>\n",
       "      <td>0.643262</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83159</th>\n",
       "      <td>77.0</td>\n",
       "      <td>37.027852</td>\n",
       "      <td>F</td>\n",
       "      <td>152.40</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-0.562816</td>\n",
       "      <td>-0.236460</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-0.701564</td>\n",
       "      <td>-0.075333</td>\n",
       "      <td>-0.499485</td>\n",
       "      <td>0.108668</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52980</th>\n",
       "      <td>55.0</td>\n",
       "      <td>26.497045</td>\n",
       "      <td>M</td>\n",
       "      <td>163.00</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-0.516683</td>\n",
       "      <td>-0.236460</td>\n",
       "      <td>-0.014563</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.553978</td>\n",
       "      <td>-0.205693</td>\n",
       "      <td>-0.135368</td>\n",
       "      <td>0.108668</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34766</th>\n",
       "      <td>33.0</td>\n",
       "      <td>29.946510</td>\n",
       "      <td>M</td>\n",
       "      <td>195.58</td>\n",
       "      <td>African American</td>\n",
       "      <td>1.144079</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>0.127674</td>\n",
       "      <td>0.447375</td>\n",
       "      <td>0.971076</td>\n",
       "      <td>0.967544</td>\n",
       "      <td>0.488833</td>\n",
       "      <td>1.483339</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25173</th>\n",
       "      <td>53.0</td>\n",
       "      <td>29.092648</td>\n",
       "      <td>M</td>\n",
       "      <td>175.20</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>0.359830</td>\n",
       "      <td>0.504244</td>\n",
       "      <td>2.118992</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-1.734665</td>\n",
       "      <td>-0.727132</td>\n",
       "      <td>-0.863603</td>\n",
       "      <td>-0.960521</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30245</th>\n",
       "      <td>87.0</td>\n",
       "      <td>23.725286</td>\n",
       "      <td>F</td>\n",
       "      <td>155.00</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-1.208668</td>\n",
       "      <td>-1.075923</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>0.233146</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>-0.083351</td>\n",
       "      <td>-0.502297</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35307</th>\n",
       "      <td>58.0</td>\n",
       "      <td>20.514199</td>\n",
       "      <td>M</td>\n",
       "      <td>183.00</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>0.221433</td>\n",
       "      <td>0.454863</td>\n",
       "      <td>-0.867985</td>\n",
       "      <td>0.447375</td>\n",
       "      <td>-1.587079</td>\n",
       "      <td>-1.248570</td>\n",
       "      <td>-1.435787</td>\n",
       "      <td>-0.807779</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3942</th>\n",
       "      <td>80.0</td>\n",
       "      <td>29.489750</td>\n",
       "      <td>F</td>\n",
       "      <td>164.50</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>-0.516683</td>\n",
       "      <td>-0.927783</td>\n",
       "      <td>-0.299037</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.675904</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>0.124716</td>\n",
       "      <td>-0.807779</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72051</th>\n",
       "      <td>72.0</td>\n",
       "      <td>22.819490</td>\n",
       "      <td>F</td>\n",
       "      <td>152.40</td>\n",
       "      <td>Other/Unknown</td>\n",
       "      <td>0.775021</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.849150</td>\n",
       "      <td>1.554162</td>\n",
       "      <td>-1.071670</td>\n",
       "      <td>1.406968</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7857</th>\n",
       "      <td>75.0</td>\n",
       "      <td>37.694687</td>\n",
       "      <td>F</td>\n",
       "      <td>149.90</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>1.144079</td>\n",
       "      <td>1.146187</td>\n",
       "      <td>-0.441274</td>\n",
       "      <td>-0.665511</td>\n",
       "      <td>0.921880</td>\n",
       "      <td>-0.466412</td>\n",
       "      <td>-0.135368</td>\n",
       "      <td>-0.273185</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4555 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age        bmi gender  height         ethnicity  h1_heartrate_max  \\\n",
       "18296  68.0  23.956261      F  165.10          Hispanic         -1.762255   \n",
       "83159  77.0  37.027852      F  152.40         Caucasian         -0.562816   \n",
       "52980  55.0  26.497045      M  163.00         Caucasian         -0.516683   \n",
       "34766  33.0  29.946510      M  195.58  African American          1.144079   \n",
       "25173  53.0  29.092648      M  175.20         Caucasian          0.359830   \n",
       "...     ...        ...    ...     ...               ...               ...   \n",
       "30245  87.0  23.725286      F  155.00         Caucasian         -1.208668   \n",
       "35307  58.0  20.514199      M  183.00         Caucasian          0.221433   \n",
       "3942   80.0  29.489750      F  164.50         Caucasian         -0.516683   \n",
       "72051  72.0  22.819490      F  152.40     Other/Unknown          0.775021   \n",
       "7857   75.0  37.694687      F  149.90         Caucasian          1.144079   \n",
       "\n",
       "       h1_heartrate_min  d1_temp_max  d1_temp_min  d1_mbp_max  d1_mbp_min  \\\n",
       "18296         -1.470965     0.412148     0.030043   -0.357197    0.380925   \n",
       "83159         -0.236460     0.696622    -1.082843   -0.701564   -0.075333   \n",
       "52980         -0.236460    -0.014563     0.169153   -0.553978   -0.205693   \n",
       "34766          1.244947     0.127674     0.447375    0.971076    0.967544   \n",
       "25173          0.504244     2.118992    -1.082843   -1.734665   -0.727132   \n",
       "...                 ...          ...          ...         ...         ...   \n",
       "30245         -1.075923     0.696622     0.169153    0.233146   -0.596772   \n",
       "35307          0.454863    -0.867985     0.447375   -1.587079   -1.248570   \n",
       "3942          -0.927783    -0.299037     0.030043    0.675904   -0.596772   \n",
       "72051          1.244947    -0.725748     0.169153   -0.849150    1.554162   \n",
       "7857           1.146187    -0.441274    -0.665511    0.921880   -0.466412   \n",
       "\n",
       "       d1_diasbp_max  d1_diasbp_min hospital_death  \n",
       "18296      -0.083351       0.643262              0  \n",
       "83159      -0.499485       0.108668              0  \n",
       "52980      -0.135368       0.108668              0  \n",
       "34766       0.488833       1.483339              0  \n",
       "25173      -0.863603      -0.960521              1  \n",
       "...              ...            ...            ...  \n",
       "30245      -0.083351      -0.502297              0  \n",
       "35307      -1.435787      -0.807779              0  \n",
       "3942        0.124716      -0.807779              0  \n",
       "72051      -1.071670       1.406968              0  \n",
       "7857       -0.135368      -0.273185              0  \n",
       "\n",
       "[4555 rows x 14 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "98516836-6aa2-4d07-9524-5c5ef66b3507",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>height</th>\n",
       "      <th>h1_heartrate_min</th>\n",
       "      <th>d1_temp_max</th>\n",
       "      <th>d1_temp_min</th>\n",
       "      <th>d1_mbp_min</th>\n",
       "      <th>gender</th>\n",
       "      <th>Other/Unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18296</th>\n",
       "      <td>68.0</td>\n",
       "      <td>23.956261</td>\n",
       "      <td>165.10</td>\n",
       "      <td>-1.470965</td>\n",
       "      <td>0.412148</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.380925</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83159</th>\n",
       "      <td>77.0</td>\n",
       "      <td>37.027852</td>\n",
       "      <td>152.40</td>\n",
       "      <td>-0.236460</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-0.075333</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52980</th>\n",
       "      <td>55.0</td>\n",
       "      <td>26.497045</td>\n",
       "      <td>163.00</td>\n",
       "      <td>-0.236460</td>\n",
       "      <td>-0.014563</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.205693</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34766</th>\n",
       "      <td>33.0</td>\n",
       "      <td>29.946510</td>\n",
       "      <td>195.58</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>0.127674</td>\n",
       "      <td>0.447375</td>\n",
       "      <td>0.967544</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25173</th>\n",
       "      <td>53.0</td>\n",
       "      <td>29.092648</td>\n",
       "      <td>175.20</td>\n",
       "      <td>0.504244</td>\n",
       "      <td>2.118992</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-0.727132</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30245</th>\n",
       "      <td>87.0</td>\n",
       "      <td>23.725286</td>\n",
       "      <td>155.00</td>\n",
       "      <td>-1.075923</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35307</th>\n",
       "      <td>58.0</td>\n",
       "      <td>20.514199</td>\n",
       "      <td>183.00</td>\n",
       "      <td>0.454863</td>\n",
       "      <td>-0.867985</td>\n",
       "      <td>0.447375</td>\n",
       "      <td>-1.248570</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3942</th>\n",
       "      <td>80.0</td>\n",
       "      <td>29.489750</td>\n",
       "      <td>164.50</td>\n",
       "      <td>-0.927783</td>\n",
       "      <td>-0.299037</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72051</th>\n",
       "      <td>72.0</td>\n",
       "      <td>22.819490</td>\n",
       "      <td>152.40</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>1.554162</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7857</th>\n",
       "      <td>75.0</td>\n",
       "      <td>37.694687</td>\n",
       "      <td>149.90</td>\n",
       "      <td>1.146187</td>\n",
       "      <td>-0.441274</td>\n",
       "      <td>-0.665511</td>\n",
       "      <td>-0.466412</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4555 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age        bmi  height  h1_heartrate_min  d1_temp_max  d1_temp_min  \\\n",
       "18296  68.0  23.956261  165.10         -1.470965     0.412148     0.030043   \n",
       "83159  77.0  37.027852  152.40         -0.236460     0.696622    -1.082843   \n",
       "52980  55.0  26.497045  163.00         -0.236460    -0.014563     0.169153   \n",
       "34766  33.0  29.946510  195.58          1.244947     0.127674     0.447375   \n",
       "25173  53.0  29.092648  175.20          0.504244     2.118992    -1.082843   \n",
       "...     ...        ...     ...               ...          ...          ...   \n",
       "30245  87.0  23.725286  155.00         -1.075923     0.696622     0.169153   \n",
       "35307  58.0  20.514199  183.00          0.454863    -0.867985     0.447375   \n",
       "3942   80.0  29.489750  164.50         -0.927783    -0.299037     0.030043   \n",
       "72051  72.0  22.819490  152.40          1.244947    -0.725748     0.169153   \n",
       "7857   75.0  37.694687  149.90          1.146187    -0.441274    -0.665511   \n",
       "\n",
       "       d1_mbp_min  gender  Other/Unknown  \n",
       "18296    0.380925       0              0  \n",
       "83159   -0.075333       0              0  \n",
       "52980   -0.205693       1              0  \n",
       "34766    0.967544       1              0  \n",
       "25173   -0.727132       1              0  \n",
       "...           ...     ...            ...  \n",
       "30245   -0.596772       0              0  \n",
       "35307   -1.248570       1              0  \n",
       "3942    -0.596772       0              0  \n",
       "72051    1.554162       0              1  \n",
       "7857    -0.466412       0              0  \n",
       "\n",
       "[4555 rows x 9 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=25)\n",
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "dd2958bf-840d-4b5e-8388-934e0df4e38f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/junqianliu/opt/anaconda3/envs/SI618/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "71fd6b22-07e7-44cc-b273-cb71be800f93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 93.24%\n"
     ]
    }
   ],
   "source": [
    "accuracy = logreg.score(X_test, y_test)\n",
    "print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9ce9450b-7475-4206-a68f-d1f434929fda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1055    3]\n",
      " [  74    7]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "y_pred = logreg.predict(X_test)\n",
    "confusion_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(confusion_matrix)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03768f67-d5b5-4486-8bba-d45c9d259454",
   "metadata": {},
   "source": [
    "#### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9fa97bae-ce0c-4510-a90f-a99befbd94c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0142d94d-8b9f-4a84-b96a-263c6a8fe99e",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_df = pd.concat([df_std, gender_data, ethnicity_data], axis = 1)\n",
    "knn_df.drop(['gender', 'ethnicity'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4054f149-f9fd-4b99-91e2-1cc489307a05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>height</th>\n",
       "      <th>h1_heartrate_max</th>\n",
       "      <th>h1_heartrate_min</th>\n",
       "      <th>d1_temp_max</th>\n",
       "      <th>d1_temp_min</th>\n",
       "      <th>d1_mbp_max</th>\n",
       "      <th>d1_mbp_min</th>\n",
       "      <th>d1_diasbp_max</th>\n",
       "      <th>d1_diasbp_min</th>\n",
       "      <th>hospital_death</th>\n",
       "      <th>gender</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Caucasian</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Other/Unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30404</th>\n",
       "      <td>59.0</td>\n",
       "      <td>18.984375</td>\n",
       "      <td>160.0</td>\n",
       "      <td>1.282476</td>\n",
       "      <td>0.158582</td>\n",
       "      <td>0.269911</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.479123</td>\n",
       "      <td>-1.574469</td>\n",
       "      <td>0.696901</td>\n",
       "      <td>-1.266003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83591</th>\n",
       "      <td>85.0</td>\n",
       "      <td>25.582316</td>\n",
       "      <td>172.7</td>\n",
       "      <td>-0.701212</td>\n",
       "      <td>-1.174684</td>\n",
       "      <td>-2.432593</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-0.012830</td>\n",
       "      <td>-1.704829</td>\n",
       "      <td>0.020682</td>\n",
       "      <td>-2.029709</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27388</th>\n",
       "      <td>63.0</td>\n",
       "      <td>28.867188</td>\n",
       "      <td>160.0</td>\n",
       "      <td>-0.286022</td>\n",
       "      <td>-0.433981</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.479123</td>\n",
       "      <td>0.837184</td>\n",
       "      <td>1.009001</td>\n",
       "      <td>0.566891</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17328</th>\n",
       "      <td>86.0</td>\n",
       "      <td>29.186193</td>\n",
       "      <td>157.5</td>\n",
       "      <td>0.175301</td>\n",
       "      <td>0.603004</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.406392</td>\n",
       "      <td>-0.857491</td>\n",
       "      <td>0.072699</td>\n",
       "      <td>-0.807779</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1830</th>\n",
       "      <td>43.0</td>\n",
       "      <td>32.289347</td>\n",
       "      <td>167.6</td>\n",
       "      <td>1.282476</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>0.838859</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>0.725099</td>\n",
       "      <td>1.032724</td>\n",
       "      <td>0.488833</td>\n",
       "      <td>0.719633</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47237</th>\n",
       "      <td>57.0</td>\n",
       "      <td>15.967369</td>\n",
       "      <td>170.1</td>\n",
       "      <td>-0.101493</td>\n",
       "      <td>0.306723</td>\n",
       "      <td>-0.441274</td>\n",
       "      <td>0.586485</td>\n",
       "      <td>-0.750760</td>\n",
       "      <td>-0.270873</td>\n",
       "      <td>-0.707552</td>\n",
       "      <td>-0.120444</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20183</th>\n",
       "      <td>73.0</td>\n",
       "      <td>18.143962</td>\n",
       "      <td>164.0</td>\n",
       "      <td>-1.347065</td>\n",
       "      <td>-1.224064</td>\n",
       "      <td>0.269911</td>\n",
       "      <td>-0.248179</td>\n",
       "      <td>-1.734665</td>\n",
       "      <td>-0.336053</td>\n",
       "      <td>-1.851921</td>\n",
       "      <td>-0.502297</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14825</th>\n",
       "      <td>53.0</td>\n",
       "      <td>24.609375</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0.452095</td>\n",
       "      <td>0.701765</td>\n",
       "      <td>-0.014563</td>\n",
       "      <td>-0.526400</td>\n",
       "      <td>-0.308002</td>\n",
       "      <td>0.641645</td>\n",
       "      <td>-0.187385</td>\n",
       "      <td>1.101486</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87412</th>\n",
       "      <td>63.0</td>\n",
       "      <td>66.107338</td>\n",
       "      <td>170.2</td>\n",
       "      <td>-0.839609</td>\n",
       "      <td>-1.421585</td>\n",
       "      <td>-0.867985</td>\n",
       "      <td>-0.665511</td>\n",
       "      <td>1.463029</td>\n",
       "      <td>-0.270873</td>\n",
       "      <td>0.956984</td>\n",
       "      <td>-1.266003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46819</th>\n",
       "      <td>58.0</td>\n",
       "      <td>27.382183</td>\n",
       "      <td>182.9</td>\n",
       "      <td>0.129169</td>\n",
       "      <td>-0.187079</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>-0.248179</td>\n",
       "      <td>-0.849150</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>-0.759569</td>\n",
       "      <td>-0.273185</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5694 rows Ã— 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age        bmi  height  h1_heartrate_max  h1_heartrate_min  \\\n",
       "30404  59.0  18.984375   160.0          1.282476          0.158582   \n",
       "83591  85.0  25.582316   172.7         -0.701212         -1.174684   \n",
       "27388  63.0  28.867188   160.0         -0.286022         -0.433981   \n",
       "17328  86.0  29.186193   157.5          0.175301          0.603004   \n",
       "1830   43.0  32.289347   167.6          1.282476          1.244947   \n",
       "...     ...        ...     ...               ...               ...   \n",
       "47237  57.0  15.967369   170.1         -0.101493          0.306723   \n",
       "20183  73.0  18.143962   164.0         -1.347065         -1.224064   \n",
       "14825  53.0  24.609375   160.0          0.452095          0.701765   \n",
       "87412  63.0  66.107338   170.2         -0.839609         -1.421585   \n",
       "46819  58.0  27.382183   182.9          0.129169         -0.187079   \n",
       "\n",
       "       d1_temp_max  d1_temp_min  d1_mbp_max  d1_mbp_min  d1_diasbp_max  \\\n",
       "30404     0.269911     0.030043    0.479123   -1.574469       0.696901   \n",
       "83591    -2.432593    -1.082843   -0.012830   -1.704829       0.020682   \n",
       "27388     0.696622     0.030043    0.479123    0.837184       1.009001   \n",
       "17328    -0.725748     0.169153   -0.406392   -0.857491       0.072699   \n",
       "1830      0.838859     0.169153    0.725099    1.032724       0.488833   \n",
       "...            ...          ...         ...         ...            ...   \n",
       "47237    -0.441274     0.586485   -0.750760   -0.270873      -0.707552   \n",
       "20183     0.269911    -0.248179   -1.734665   -0.336053      -1.851921   \n",
       "14825    -0.014563    -0.526400   -0.308002    0.641645      -0.187385   \n",
       "87412    -0.867985    -0.665511    1.463029   -0.270873       0.956984   \n",
       "46819    -0.725748    -0.248179   -0.849150   -0.596772      -0.759569   \n",
       "\n",
       "       d1_diasbp_min hospital_death  gender  Asian  Caucasian  Hispanic  \\\n",
       "30404      -1.266003              0       0      0          1         0   \n",
       "83591      -2.029709              1       1      0          1         0   \n",
       "27388       0.566891              0       0      0          1         0   \n",
       "17328      -0.807779              0       1      0          0         1   \n",
       "1830        0.719633              0       1      0          1         0   \n",
       "...              ...            ...     ...    ...        ...       ...   \n",
       "47237      -0.120444              0       0      0          1         0   \n",
       "20183      -0.502297              0       0      0          1         0   \n",
       "14825       1.101486              0       1      0          0         1   \n",
       "87412      -1.266003              0       0      0          1         0   \n",
       "46819      -0.273185              0       1      0          1         0   \n",
       "\n",
       "       Native American  Other/Unknown  \n",
       "30404                0              0  \n",
       "83591                0              0  \n",
       "27388                0              0  \n",
       "17328                0              0  \n",
       "1830                 0              0  \n",
       "...                ...            ...  \n",
       "47237                0              0  \n",
       "20183                0              0  \n",
       "14825                0              0  \n",
       "87412                0              0  \n",
       "46819                0              0  \n",
       "\n",
       "[5694 rows x 18 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_df = log_df.rename(columns={\"M\": \"gender\"})\n",
    "knn_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f71aa79a-3745-40fe-9ff4-8bfee3991f9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = knn_df['hospital_death']\n",
    "X = knn_df.drop(columns = 'hospital_death', inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "54c345d9-aad2-41b2-90d6-60458254c1f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>height</th>\n",
       "      <th>h1_heartrate_max</th>\n",
       "      <th>h1_heartrate_min</th>\n",
       "      <th>d1_temp_max</th>\n",
       "      <th>d1_temp_min</th>\n",
       "      <th>d1_mbp_max</th>\n",
       "      <th>d1_mbp_min</th>\n",
       "      <th>d1_diasbp_max</th>\n",
       "      <th>d1_diasbp_min</th>\n",
       "      <th>gender</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Caucasian</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Other/Unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18296</th>\n",
       "      <td>68.0</td>\n",
       "      <td>23.956261</td>\n",
       "      <td>165.10</td>\n",
       "      <td>-1.762255</td>\n",
       "      <td>-1.470965</td>\n",
       "      <td>0.412148</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>-0.357197</td>\n",
       "      <td>0.380925</td>\n",
       "      <td>-0.083351</td>\n",
       "      <td>0.643262</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83159</th>\n",
       "      <td>77.0</td>\n",
       "      <td>37.027852</td>\n",
       "      <td>152.40</td>\n",
       "      <td>-0.562816</td>\n",
       "      <td>-0.236460</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-0.701564</td>\n",
       "      <td>-0.075333</td>\n",
       "      <td>-0.499485</td>\n",
       "      <td>0.108668</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52980</th>\n",
       "      <td>55.0</td>\n",
       "      <td>26.497045</td>\n",
       "      <td>163.00</td>\n",
       "      <td>-0.516683</td>\n",
       "      <td>-0.236460</td>\n",
       "      <td>-0.014563</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.553978</td>\n",
       "      <td>-0.205693</td>\n",
       "      <td>-0.135368</td>\n",
       "      <td>0.108668</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34766</th>\n",
       "      <td>33.0</td>\n",
       "      <td>29.946510</td>\n",
       "      <td>195.58</td>\n",
       "      <td>1.144079</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>0.127674</td>\n",
       "      <td>0.447375</td>\n",
       "      <td>0.971076</td>\n",
       "      <td>0.967544</td>\n",
       "      <td>0.488833</td>\n",
       "      <td>1.483339</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25173</th>\n",
       "      <td>53.0</td>\n",
       "      <td>29.092648</td>\n",
       "      <td>175.20</td>\n",
       "      <td>0.359830</td>\n",
       "      <td>0.504244</td>\n",
       "      <td>2.118992</td>\n",
       "      <td>-1.082843</td>\n",
       "      <td>-1.734665</td>\n",
       "      <td>-0.727132</td>\n",
       "      <td>-0.863603</td>\n",
       "      <td>-0.960521</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30245</th>\n",
       "      <td>87.0</td>\n",
       "      <td>23.725286</td>\n",
       "      <td>155.00</td>\n",
       "      <td>-1.208668</td>\n",
       "      <td>-1.075923</td>\n",
       "      <td>0.696622</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>0.233146</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>-0.083351</td>\n",
       "      <td>-0.502297</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35307</th>\n",
       "      <td>58.0</td>\n",
       "      <td>20.514199</td>\n",
       "      <td>183.00</td>\n",
       "      <td>0.221433</td>\n",
       "      <td>0.454863</td>\n",
       "      <td>-0.867985</td>\n",
       "      <td>0.447375</td>\n",
       "      <td>-1.587079</td>\n",
       "      <td>-1.248570</td>\n",
       "      <td>-1.435787</td>\n",
       "      <td>-0.807779</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3942</th>\n",
       "      <td>80.0</td>\n",
       "      <td>29.489750</td>\n",
       "      <td>164.50</td>\n",
       "      <td>-0.516683</td>\n",
       "      <td>-0.927783</td>\n",
       "      <td>-0.299037</td>\n",
       "      <td>0.030043</td>\n",
       "      <td>0.675904</td>\n",
       "      <td>-0.596772</td>\n",
       "      <td>0.124716</td>\n",
       "      <td>-0.807779</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72051</th>\n",
       "      <td>72.0</td>\n",
       "      <td>22.819490</td>\n",
       "      <td>152.40</td>\n",
       "      <td>0.775021</td>\n",
       "      <td>1.244947</td>\n",
       "      <td>-0.725748</td>\n",
       "      <td>0.169153</td>\n",
       "      <td>-0.849150</td>\n",
       "      <td>1.554162</td>\n",
       "      <td>-1.071670</td>\n",
       "      <td>1.406968</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7857</th>\n",
       "      <td>75.0</td>\n",
       "      <td>37.694687</td>\n",
       "      <td>149.90</td>\n",
       "      <td>1.144079</td>\n",
       "      <td>1.146187</td>\n",
       "      <td>-0.441274</td>\n",
       "      <td>-0.665511</td>\n",
       "      <td>0.921880</td>\n",
       "      <td>-0.466412</td>\n",
       "      <td>-0.135368</td>\n",
       "      <td>-0.273185</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4555 rows Ã— 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age        bmi  height  h1_heartrate_max  h1_heartrate_min  \\\n",
       "18296  68.0  23.956261  165.10         -1.762255         -1.470965   \n",
       "83159  77.0  37.027852  152.40         -0.562816         -0.236460   \n",
       "52980  55.0  26.497045  163.00         -0.516683         -0.236460   \n",
       "34766  33.0  29.946510  195.58          1.144079          1.244947   \n",
       "25173  53.0  29.092648  175.20          0.359830          0.504244   \n",
       "...     ...        ...     ...               ...               ...   \n",
       "30245  87.0  23.725286  155.00         -1.208668         -1.075923   \n",
       "35307  58.0  20.514199  183.00          0.221433          0.454863   \n",
       "3942   80.0  29.489750  164.50         -0.516683         -0.927783   \n",
       "72051  72.0  22.819490  152.40          0.775021          1.244947   \n",
       "7857   75.0  37.694687  149.90          1.144079          1.146187   \n",
       "\n",
       "       d1_temp_max  d1_temp_min  d1_mbp_max  d1_mbp_min  d1_diasbp_max  \\\n",
       "18296     0.412148     0.030043   -0.357197    0.380925      -0.083351   \n",
       "83159     0.696622    -1.082843   -0.701564   -0.075333      -0.499485   \n",
       "52980    -0.014563     0.169153   -0.553978   -0.205693      -0.135368   \n",
       "34766     0.127674     0.447375    0.971076    0.967544       0.488833   \n",
       "25173     2.118992    -1.082843   -1.734665   -0.727132      -0.863603   \n",
       "...            ...          ...         ...         ...            ...   \n",
       "30245     0.696622     0.169153    0.233146   -0.596772      -0.083351   \n",
       "35307    -0.867985     0.447375   -1.587079   -1.248570      -1.435787   \n",
       "3942     -0.299037     0.030043    0.675904   -0.596772       0.124716   \n",
       "72051    -0.725748     0.169153   -0.849150    1.554162      -1.071670   \n",
       "7857     -0.441274    -0.665511    0.921880   -0.466412      -0.135368   \n",
       "\n",
       "       d1_diasbp_min  gender  Asian  Caucasian  Hispanic  Native American  \\\n",
       "18296       0.643262       0      0          0         1                0   \n",
       "83159       0.108668       0      0          1         0                0   \n",
       "52980       0.108668       1      0          1         0                0   \n",
       "34766       1.483339       1      0          0         0                0   \n",
       "25173      -0.960521       1      0          1         0                0   \n",
       "...              ...     ...    ...        ...       ...              ...   \n",
       "30245      -0.502297       0      0          1         0                0   \n",
       "35307      -0.807779       1      0          1         0                0   \n",
       "3942       -0.807779       0      0          1         0                0   \n",
       "72051       1.406968       0      0          0         0                0   \n",
       "7857       -0.273185       0      0          1         0                0   \n",
       "\n",
       "       Other/Unknown  \n",
       "18296              0  \n",
       "83159              0  \n",
       "52980              0  \n",
       "34766              0  \n",
       "25173              0  \n",
       "...              ...  \n",
       "30245              0  \n",
       "35307              0  \n",
       "3942               0  \n",
       "72051              1  \n",
       "7857               0  \n",
       "\n",
       "[4555 rows x 17 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=25)\n",
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9f079af5-5cdb-4ae5-a50f-de6533e9ba6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=KNeighborsClassifier(),\n",
       "             param_grid={'n_neighbors': range(1, 50)})"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameters = {\"n_neighbors\": range(1, 50)}\n",
    "gridsearch = GridSearchCV(KNeighborsClassifier(), parameters)\n",
    "gridsearch.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7bf12632-866c-40eb-ae6b-8452211372b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=14)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gridsearch.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "32fa3ea6-633b-44a7-8b42-0d461b12e622",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=14)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_model = KNeighborsClassifier(14)\n",
    "knn_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "819b35d6-38b8-41cb-85e9-8f5b17aaccae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.28959262048563417"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from math import sqrt\n",
    "train_preds = knn_model.predict(X_train)\n",
    "mse = mean_squared_error(y_train, train_preds)\n",
    "rmse = sqrt(mse)\n",
    "rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8328fbec-3f16-4a9a-8cce-6d4ffa903804",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2666739829256819"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_preds = knn_model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, test_preds)\n",
    "rmse = sqrt(mse)\n",
    "rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "233651d9-2367-44e9-a350-f3da8d73ff55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 92.89%\n"
     ]
    }
   ],
   "source": [
    "accuracy = knn_model.score(X_test, y_test)\n",
    "print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "551 v2.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
